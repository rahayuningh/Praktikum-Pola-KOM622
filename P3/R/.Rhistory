#=========================================
#No.1
#=========================================
#Memanggil library EBImage (asumsi sudah menginstall package EBImage)
library(EBImage)
#Membaca data citra
x <- readImage(system.file('images','shapes.png', package='EBImage'))
#Menampilkan hasil citra yang telah dibaca
display(x)
#Mengambil subdata citra
x <- x[110:312,1:130]
#Menampilkan sub data citra yang telah dibaca
display(x)
#bwlabel digunakan untuk melabeli objek yang terhubung (set terhubung) dalam
#gambar biner. Objek gambar (x) dianggap sebagai gambar biner, yang
#pikselnya bernilai 0 (hitam) dianggap sebagai latar belakang (background)
#dan piksel lainnya sebagai piksel latar depan (foreground).
y <- bwlabel(x)
#Menampilkan citra hasil bwlabel sebagai gambar biner (hitam (nilai=0), putih (nilai=1))
display(y, title='Binary')
#=========================================
#No.2
#=========================================
#Unduh citra buah (cth:alpukat) dari internet,dan baca melalui R
#Membaca citra alpukat
original_image <- readImage(file.choose())
#menampilkan citra alpukat original
display(original_image)
#Konversi citra menjadi grayscale
r = channel(original_image,"r")
g = channel(original_image,"g")
b = channel(original_image,"b")
new_image = 0.2126*r+0.7152*g+0.0722*b
#Menampilkan citra alpukat yang sudah dikonversi menjadi grayscale
display(new_image)
#=========================================
#No.3
#=========================================
#Memasukkan data citra alpukat grayscale ke variabel Dataimage
Dataimage <- new_image@.Data
#Mengambil satu subdata citra dari citra alpukat grayscale
Subdata1 <- Dataimage[110:312,130:200]
#Menampilkan subdata citra yang telah diambil
display(Subdata1)
#Mengambil beberapa (multiple) subdata citra dalam bentuk vektor dari citra alpukat grayscale
Subdata2<- Dataimage[c(1:40, 100:150, 350:400 ), c(1:40, 100:150, 250:300)]
#Menampilkan multiple subdata citra yang telah diambil
display(Subdata2)
#=========================================
#No.4
#=========================================
#Unduh citra buah lain, dan lakukakan langkah yang sama dengan sebelumnya
#Membaca citra buah apel
original_image2 <- readImage(file.choose())
#Membaca citra buah apel original
display(original_image2)
#Konversi citra menjadi grayscale
r2 = channel(original_image2,"r")
g2 = channel(original_image2,"g")
b2 = channel(original_image2,"b")
new_image2 = 0.2126*r2+0.7152*g2+0.0722*b2
#Menampilkan citra apel yang sudah dikonversi menjadi grayscale
display(new_image2)
#Memasukkan data citra apel grayscale ke variabel Dataimage
Dataimage2 <- new_image2@.Data
#Ekstrak nilai citra dengan nama DataImage2
#Mengambil subdata citra apel sesuai dengan ukuran dimensi citra alpukat
Dataimage2 <- Dataimage2[1:dim(Dataimage)[1], 1:dim(Dataimage)[2]]
#Konversi data citra menjadi vektor
obs1 <- as.vector(t(Dataimage))
obs2 <- as.vector(t(Dataimage2))
#Menggabungan dua vektor citra
obs_gabung <- rbind(obs1,obs2)
#Mengubah matriks gabungan vektor menjadi data frame
dataset_buah <- as.data.frame(obs_gabung)
dataset_buah_baru<-cbind(dataset_buah, klas)
#Memberi label data citra pada data frame
klas<- c("alpokat", "apel")
#Menampilkan dimensi dataframe
dim(dataset_buah_baru)
#Mengubah matriks gabungan vektor menjadi data frame
dataset_buah <- as.data.frame(obs_gabung)
#Menggabungan dua vektor citra
obs_gabung <- rbind(obs1,obs2)
#Mengubah matriks gabungan vektor menjadi data frame
dataset_buah <- as.data.frame(obs_gabung)
#Memberi label data citra pada data frame
klas<- c("alpokat", "apel")
dataset_buah_baru<-cbind(dataset_buah, klas)
#Menampilkan dimensi dataframe
dim(dataset_buah_baru)
#Menampilkan label data
dataset_buah_baru[1,640001]
dataset_buah_baru[2,640001]
#=========================================
#No.9
#=========================================
#install.packages("caTools")
library(caTools)
#mengambil dataset dari url
url ="https://vincentarelbundock.github.io/Rdatasets/csv/MASS/Pima.te.csv"
#membaca data url
dataset <- read.table(url, sep=',', header=TRUE)
#menampilkan dataset
View(dataset)
#Membuat potongan program untuk split dataset menjadi
#data_training dan data_testing, dengan proporsi training adalah 80%, testing adalah 20%
set.seed(123)
split = sample.split(dataset, SplitRatio = 0.80)
#Membuat variabel baru dengan label TRUE(train), FALSE(test)
train = subset(dataset,split==TRUE) # label TRUE = data train
test = subset(dataset,split==FALSE) # label FALSE = data test
#Mencetak ukuran data train dan data test
print(dim(train)); print(dim(test))
#Menampilkan data train dan data tes
View(train)
View(test)
#=========================================
#No.10
#=========================================
#Menggunakan data set di atas, buat
#potongan program untuk split dataset menjadi data_training dan data_testing,
#menggungkan k-cross validation dengan k = 8.
#install.packages("cvTools")
library(cvTools)
set.seed(1234)  # set seed for reproducibility
#Menjalankan fungsi k-fold cross validation dengan K=8
k_fold<-cvFolds(nrow(dataset), K = 8, type = "random")
for(i in 1:8){
testIdx <- which(k_fold[["which"]]==i, arr.ind=TRUE)
trainData2 <- dataset[-testIdx, ]
testData2 <- dataset[testIdx,]}
#Menampilkan data train dan data test
View(trainData2)
View(testData2)
#=========================================
#No.1
#=========================================
#Memanggil library EBImage (asumsi sudah menginstall package EBImage)
library(EBImage)
